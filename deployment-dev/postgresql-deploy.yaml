apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-db-script
data:
  init-db.sql: |
    CREATE SCHEMA IF NOT EXISTS bmatch;

    CREATE TABLE IF NOT EXISTS bmatch.users (
      id SERIAL PRIMARY KEY,
      username VARCHAR(50) NOT NULL,
      email VARCHAR(50) NOT NULL,
      mmr INTEGER,  -- Added this line for the mmr column
      password VARCHAR(255) NOT NULL,
      role VARCHAR(50) NOT NULL,
      tag VARCHAR(50),
      status VARCHAR(50) NOT NULL,
      is_account_non_expired BOOLEAN NOT NULL,
      is_account_non_locked BOOLEAN NOT NULL,
      is_credentials_non_expired BOOLEAN NOT NULL,
      is_enabled BOOLEAN NOT NULL
    );
---
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-init-job
spec:
  template:
    spec:
      containers:
        - name: init-db
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              value: postgres-service
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_DB
              value: "bmatch"
          volumeMounts:
            - name: init-db-script
              mountPath: /docker-entrypoint-initdb.d
          command: [ 'sh', '-c', 'until pg_isready -h $POSTGRES_HOST -p 5432; do sleep 2; done; PGPASSWORD=eechai5ua5Noow5g psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -a -f /docker-entrypoint-initdb.d/init-db.sql' ]
          #command: ["sh", "-c", "until pg_isready -h $POSTGRES_HOST -p 5432; do sleep 2; done; PGPASSWORD=\"$POSTGRES_PASSWORD\" psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -a -f /docker-entrypoint-initdb.d/init-db.sql"]

      restartPolicy: OnFailure
      volumes:
        - name: init-db-script
          configMap:
            name: postgres-init-db-script
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        env:
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-secrets
                key: POSTGRES_PASSWORD
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: postgres-secrets
                key: POSTGRES_USER
        ports:
        - containerPort: 5432
      volumes:
        - name: init-db-script
          configMap:
            name: postgres-init-db-script
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
